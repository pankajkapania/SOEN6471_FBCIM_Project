package com.fbcim.ui;

import com.fbcim.FBChatContext;
import com.fbcim.FBLoginManager;
import com.fbcim.update.UpdateManager;
import com.fbcim.util.ImageUtil;
import org.jdic.web.BrComponent;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicButtonUI;

import java.awt.CardLayout;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
/*  Facebook Chat Instant Messenger
    Copyright (C) 2012 Ori Rejwan

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
public class FBLoginFrame extends CustomFrame {

    /** The logger instance to use. */
    private static final Logger LOG = Logger.getLogger(FBLoginFrame.class.getName());

    private static final int FRAME_WIDTH = 662;
    private static final int FRAME_HEIGHT = 327;

    private static final String FRONT_PAGE_INDEX = "FRONT_PAGE_INDEX";
    private static final String WEB_BROWSER_INDEX = "WEB_BROWSER_INDEX";

    private static final int CONNECTION_TIMEOUT = 15 * 1000;

    /** The facebook login url to be used. */
    private static final String FACEBOOK_LOGIN_URL = "https://www.facebook.com/dialog/oauth?client_id=" + FBLoginManager.API_KEY + "&display=popup&redirect_uri=https://www.facebook.com/connect/login_success.html&scope=read_stream,publish_stream,user_status,friends_status,xmpp_login,offline_access&response_type=token";
//    private static final String FACEBOOK_LOGIN_URL = "https://www.facebook.com/";

    /** The access token parameter name. */
    private static final String ACCESS_TOKEN_PARAM = "access_token=";

    /** Response URL params, set in case user canceled login. */
    private static final String USER_DENIED_PARAM = "error_reason=user_denied&error=access_denied";

    /** Initial page displayed  */
    private FrontPage frontPage;

    private BrComponent webBrowser;

    /** Parent container for all components. */
    private JPanel contentPane;

    /** This listener is notified about events generated by this login frame. */
    private FBLoginFrameListener fbLoginFrameListener;

    /** Used to switch between front page and web-browser login page. */
    private CardLayout layout;

    /** Tracks browser connection timeout. */
    private ConnectionTimeoutHandler timeoutHandler;

    /**
     * Constructs login frame object.
     */
    public FBLoginFrame(FBChatContext context, FBLoginFrameListener l) {
        super(context);
        // Save listener reference.
        this.fbLoginFrameListener = l;
    }

    @Override
    public JComponent createContentPane() {
        contentPane = new JPanel();
        layout = new CardLayout();
        contentPane.setLayout(layout);

        // Construct front page.
        frontPage = new FrontPage();

        BrComponent.DESIGN_MODE = false;
        BrComponent.setDefaultPaintAlgorithm(BrComponent.PAINT_JAVA_NATIVE);
        webBrowser = new BrComponent();
        webBrowser.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals("navigatedURL")) {
                    if (timeoutHandler != null) {
                        timeoutHandler.cancel();
                    }

                    String url = (String)evt.getNewValue();
                    System.out.println(url);
                    checkCanceledLogin(url);
                    checkAccessToken(url);
                    if (url != null) {
                        if (url.startsWith("http://") || url.startsWith("https://")) {
                            layout.show(contentPane, WEB_BROWSER_INDEX);
                        }
                    }
                }
            }
        });

        // Place frame to the center of the main screen.
        setSize(FRAME_WIDTH, FRAME_HEIGHT);
        setLocationRelativeTo(null);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                SwingUtilities.invokeLater(
                        new Runnable() {
                            public void run() {
                                fbLoginFrameListener.fbLoginCanceled();
                            }
                        }
                );
            }
        });

        contentPane.add(frontPage, FRONT_PAGE_INDEX);
        contentPane.add(webBrowser, WEB_BROWSER_INDEX);
        return contentPane;
    }

    /**
     * Create custom title bar.
     *
     * @return  the custom title bar component.
     */
    protected CustomTitleBar createTitleBar() {
        return new CustomTitleBar(getTitlebarIcon(), this) {
            protected List<JButton> createCustomButtons() {
                List<JButton> customButtons =  new ArrayList<JButton>();

                JButton settingsButton = new JButton();
                settingsButton.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        context.showSettingsDialog();
                    }
                });
                settingsButton.setOpaque(false);
                settingsButton.setUI(new BasicButtonUI());
                settingsButton.setBorderPainted(false);
                settingsButton.setBorder(null);
                settingsButton.setRolloverEnabled(true);
                settingsButton.setIcon(ImageUtil.getImageIcon(FBChatImages.CONFIG_BTN));
                settingsButton.setPressedIcon(ImageUtil.getImageIcon(FBChatImages.CONFIG_BTN_PRESSED));
                settingsButton.setRolloverIcon(ImageUtil.getImageIcon(FBChatImages.CONFIG_BTN_ROLLOVER));
                settingsButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                settingsButton.setToolTipText(Msg.getString(FBChatStrings.CONFIG_BTN_TOOLTIP));

                customButtons.add(settingsButton);
                return customButtons;
            }
        };
    }


    public void login() {
        // Hide login button.
        frontPage.setLoginButtonVisible(false);

        // Check for update.
        new Thread() {
            public void run() {
                if (!new UpdateManager(context.getSettings(), FBLoginFrame.this).checkUpdate()) {
                    // Login to facebook.
                    try {
                        if (timeoutHandler != null) {
                            timeoutHandler.cancel();
                        }
                        String oAuthToken = context.getSettings().getOAuthToken();
                        oAuthToken = null;
                        if ((oAuthToken != null) && (oAuthToken.length() > 0)) {
                            // Notify listener about received token.
                            setVisible(false);
                            if (fbLoginFrameListener != null) {
                                fbLoginFrameListener.fbAccessTokenReceived(oAuthToken);
                            }
                        } else {
                            timeoutHandler = new ConnectionTimeoutHandler(System.currentTimeMillis() + CONNECTION_TIMEOUT);
                            webBrowser.setURL(FACEBOOK_LOGIN_URL);
                            timeoutHandler.start();
                        }
                    } catch (Throwable t) {
                        LOG.log(Level.SEVERE, "Failed to open facebook login page!", t);
                    }
                }
            }
        }.start();
    }

    /**
     * Tracks timeout of the initial connection established by browser.
     *
     * Returns login frame to the first screen in case timeout happened.
     *
     * @author Aleksey Prochukhan
     * @version 1.0
     */
    private class ConnectionTimeoutHandler extends Thread {
        /** The timeout timestamp. */
        private long timeout;

        /** <code>true</code> if timeout handler should be canceled. */
        private boolean canceled = false;

        /**
         * Constructs connection timeout handler.
         *
         * @param timeout
         *          the timestamp when to stop connection attempt.
         */
        ConnectionTimeoutHandler(long timeout) {
            super("ConnectionTimeoutHandler");
            this.timeout = timeout;
            this.setDaemon(true);
        }

        /**
         * Cancels current handler.
         */
        public void cancel() {
            this.canceled = true;
        }

        /**
         * The actual timeout handler life-cycle.
         */
        public void run() {
            while (System.currentTimeMillis() < timeout) {
                try {
                    Thread.sleep(1000);
                    if (canceled) {
                        return;
                    }
                } catch (Throwable t) {
                    LOG.log(Level.SEVERE, "Unexpected error in ConnectionTimeoutHandler!", t);
                }
            }

            // Handle timeout event.
            LOG.info("Timeout occurred while trying to connect to facebook login page!");
            frontPage.setErrorMessage("Connection timeout...");
            webBrowser.stop();
            layout.show(contentPane, FRONT_PAGE_INDEX);
            frontPage.setLoginButtonVisible(true);
        }
    }


    /**
     * Invoked in case an error happened.
     *
     * @param t
     *          the optional exception that caused this error.
     */
    public void handleError(Throwable... t) {
        frontPage.setLoginButtonVisible(true);
        if (t.length > 0) {
            frontPage.setErrorMessage(t[0].getMessage());
        } else {
            frontPage.setErrorMessage(Msg.getString(FBChatStrings.GENERAL_LOGIN_ERROR));
        }
        layout.show(contentPane, FRONT_PAGE_INDEX);
    }


    private void checkCanceledLogin(String url) {
        if (url == null) {
            url = webBrowser.getURL();
        }
        url = url.toLowerCase();
        if (url.indexOf(USER_DENIED_PARAM) > -1) {
            // Switch back to initial screen.
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    layout.show(contentPane, FRONT_PAGE_INDEX);
                    frontPage.setLoginButtonVisible(true);
                }
            });
        }
    }


    /**
     * Tests if we got the Facebook access token.
     *
     * Closes the dialog in case access token was found.
     */
    private void checkAccessToken(String url) {
        if (url == null) {
            url = webBrowser.getURL();
        }
        String urlLowerCase = url.toLowerCase();
        int accessTokenPos = urlLowerCase.indexOf(ACCESS_TOKEN_PARAM);
        String accessToken;
        if (accessTokenPos > 0) {
            int endPos = urlLowerCase.indexOf("&");
            if (endPos > 0) {
                accessToken = url.substring(accessTokenPos + ACCESS_TOKEN_PARAM.length(), endPos);
            } else {
                accessToken = url.substring(accessTokenPos + ACCESS_TOKEN_PARAM.length());
            }

            // Notify listener about received token.
            setVisible(false);
            if (fbLoginFrameListener != null) {
                fbLoginFrameListener.fbAccessTokenReceived(accessToken);
            }
        }
    }

    public void closeButtonPressed() {
        context.exitFBChat();
    }

    public void minimizeButtonPressed() {
        this.setState(Frame.ICONIFIED);
    }

    /**
     * Custom listeners that handles web-browser events
     * and tries to extract oauth access token ad well
     *
     * @author Aleksey Prochukhan
     * @version 1.0
     */

    /**
     * Front page displayed when user launches the application.
     */
    private class FrontPage extends JPanel {
        /** This button is used to login to Facebook. */
        private JButton loginBtn;

        /** Displays connection progress message. */
        private JLabel connectionLabel;

        /** Displays error message (if any).*/
        private JLabel errorLabel;

        private JPanel contentPanel;

        public FrontPage() {
            setBackground(FBChatColors.FRONT_PAGE_BG);
            setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();

            contentPanel = createContentPanel();

            gbc.weightx = 1;
            gbc.weighty = 1;
            gbc.fill = GridBagConstraints.BOTH;
            gbc.gridx = 0;
            gbc.gridy = 0;
            add(Box.createVerticalGlue(), gbc);

            gbc.weighty = 1;
            gbc.fill = GridBagConstraints.NONE;
            gbc.anchor = GridBagConstraints.CENTER;
            gbc.gridx = 0;
            gbc.gridy = 1;
            add(contentPanel, gbc);

            gbc.weightx = 1;
            gbc.weighty = 1;
            gbc.fill = GridBagConstraints.BOTH;
            gbc.gridx = 0;
            gbc.gridy = 2;
            add(Box.createVerticalGlue(), gbc);
        }

        public void setLoginButtonVisible(final boolean newVal) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    loginBtn.setVisible(newVal);
                    connectionLabel.setVisible(!newVal);
                    if (!newVal) {
                        // Reset error message.
                        setErrorMessage(null);
                    }
                }
            });
        }

        public void setErrorMessage(String msg) {
            errorLabel.setText(msg == null ? "" : msg);
        }

        private JPanel createContentPanel() {
            contentPanel = new JPanel(new GridBagLayout());
            contentPanel.setBackground(FBChatColors.FRONT_PAGE_BG);

            GridBagConstraints gbc = new GridBagConstraints();

            JLabel logoLabel = new JLabel(ImageUtil.getImageIcon(FBChatImages.FRONT_PAGE_LOGO));
            loginBtn = new JButton(ImageUtil.getImageIcon(FBChatImages.LOGIN_BTN));
            loginBtn.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    login();
                }
            });
            loginBtn.setBorderPainted(false);
            loginBtn.setBorder(null);
            loginBtn.setPressedIcon(ImageUtil.getImageIcon(FBChatImages.LOGIN_BTN_PRESSED));
            loginBtn.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

            connectionLabel = new JLabel(Msg.getString(FBChatStrings.LOGIN_PROGRESS_TEXT));
            connectionLabel.setBorder(BorderFactory.createEmptyBorder(4,0,4,0));
            connectionLabel.setOpaque(false);
            connectionLabel.setForeground(FBChatColors.FRONT_PAGE_CONNECTION_PROGRESS);
            connectionLabel.setVisible(false);

            errorLabel = new JLabel();
            errorLabel.setFont(errorLabel.getFont().deriveFont(Font.BOLD));
            errorLabel.setBorder(BorderFactory.createEmptyBorder(25,0,0,0));
            errorLabel.setOpaque(false);
            errorLabel.setForeground(FBChatColors.FRONT_PAGE_ERROR_MSG);
            errorLabel.setVisible(true);

            gbc.weightx = 1;
            gbc.weighty = 1;
            gbc.fill = GridBagConstraints.NONE;
            gbc.anchor = GridBagConstraints.CENTER;

            gbc.gridx = 0;
            gbc.gridy = 0;
            contentPanel.add(logoLabel, gbc);

            gbc.gridx = 0;
            gbc.gridy = 1;
            contentPanel.add(Box.createVerticalStrut(25), gbc);

            gbc.gridx = 0;
            gbc.gridy = 2;
            contentPanel.add(loginBtn, gbc);

            gbc.gridx = 0;
            gbc.gridy = 3;
            contentPanel.add(connectionLabel, gbc);

            gbc.gridx = 0;
            gbc.gridy = 4;
            contentPanel.add(errorLabel, gbc);

            return contentPanel;
        }
    }
}